version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: lapis_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-lapis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lapis-password}
      POSTGRES_DB: ${POSTGRES_DB:-lapis_spider}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lapis}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lapis_network

  mongodb:
    image: mongo:7.0
    container_name: lapis_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-lapis}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-lapis-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-lapis_spider}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init_mongo.js:/docker-entrypoint-initdb.d/init.js
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lapis_network

  redis:
    image: redis:7-alpine
    container_name: lapis_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-lapis-redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lapis_network

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: lapis_celery_worker
    command: celery -A src.celery worker --loglevel=info
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lapis_network

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: lapis_celery_beat
    command: celery -A src.celery beat --loglevel=info
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lapis_network

  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: lapis_flower
    command: celery -A src.celery flower --port=5555
    env_file:
      - .env
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
    networks:
      - lapis_network

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: lapis_app
    command: uvicorn src.main:app --host 0.0.0.0 --port ${APP_PORT:-8000} --reload
    env_file:
      - .env
    ports:
      - "${APP_PORT:-8000}:${APP_PORT:-8000}"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lapis_network

  frontend:
    build:
      context: ./lapis-frontend
      dockerfile: Dockerfile
    container_name: lapis_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://app:${APP_PORT:-8000}
      - PORT=${FRONTEND_PORT:-3000}
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    depends_on:
      - app
    networks:
      - lapis_network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  lapis_network:
    driver: bridge